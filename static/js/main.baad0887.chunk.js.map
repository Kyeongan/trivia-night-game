{"version":3,"sources":["API.ts","utils.ts","images/game-bg.jpg","App.Styles.ts","components/QuestionCard.Styles.ts","components/QuestionCard.tsx","App.tsx","index.tsx"],"names":["Difficulty","fetchGameQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","GlobalStyle","createGlobalStyle","BGImage","styled","div","Wrapper","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNo","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","value","onClick","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","totalQuestion","setTotalQuestion","setDifficulty","startTrivia","newQuestions","FormControl","component","RadioGroup","defaultValue","onChange","event","target","FormControlLabel","control","Radio","label","Button","variant","color","undefined","e","currentTarget","prev","answerObject","length","nextQ","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.baad0887.chunk.js","sourcesContent":["import { shuffleArray } from \"./utils\";\n// import \"semantic-ui-css/semantic.min.css\";\n\nexport type Question = {\n\tcategory: string;\n\tcorrect_answer: string;\n\tdifficulty: string;\n\tincorrect_answers: string[];\n\tquestion: string;\n\ttype: string;\n};\n\nexport type QuestionState = Question & { answers: string[] };\n\nexport enum Difficulty {\n\tEASY = \"easy\",\n\tMEDIUM = \"medium\",\n\tHARD = \"hard\"\n}\n\nexport const fetchGameQuestions = async (\n\tamount: number,\n\tdifficulty: string\n) => {\n\tconst endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n\tconst data = await (await fetch(endpoint)).json();\n\treturn data.results.map((question: Question) => ({\n\t\t...question,\n\t\tanswers: shuffleArray([\n\t\t\t...question.incorrect_answers,\n\t\t\tquestion.correct_answer\n\t\t])\n\t}));\n};\n","export const shuffleArray = (array: any[]) =>\n\t[...array].sort(() => Math.random() - 0.5);\n","export default __webpack_public_path__ + \"static/media/game-bg.aa12fbf0.jpg\";","import styled, { createGlobalStyle } from \"styled-components\";\nimport BGImage from \"./images/game-bg.jpg\";\n\nexport const GlobalStyle = createGlobalStyle`\n  html {\n    height: 100%;\n  }\n  body {\n    background-image: url(${BGImage});\n    background-size: cover;\n    margin: 0px;\n    // padding: 100px;\n    display: flex;\n    justify-content: center;\n\t\ttext-align: center;\n\t\tcolor: #fff;\n  }\n  * {\n    font-family: 'Catamaran', sans-serif;\n    box-sizing: border-box;\n  }\n\tp {\n\t\tfont-size: 1.5rem;\n\t\tcolor: #fff;\n\t}\n\th1 {\n\t\tfont-size: 60px;\n\t}\n\t.flex-container {\n\t\t/* We first create a flex layout context */\n\t\tdisplay: flex;\n\t\t\n\t\t/* Then we define the flow direction \n\t\t\tand if we allow the items to wrap \n\t\t* Remember this is the same as:\n\t\t* flex-direction: row;\n\t\t* flex-wrap: wrap;\n\t\t*/\n\t\tflex-flow: row wrap;\n\t\t\n\t\t/* Then we define how is distributed the remaining space */\n\t\tjustify-content: space-around;\n\t\t\n\t\tpadding: 0;\n\t\tmargin: 0;\n\t\tlist-style: none;\n\t}\n\n\t.flex-container > p {\n\t\tcolor: red\n\t}\n\n\t.flex-item {\n\t\t// background: tomato;\n\t\t// padding: 5px;\n\t\t// width: 200px;\n\t\t// height: 150px;\n\t\t// margin-top: 10px;\n\t\t// line-height: 150px;\n\t\t// color: white;\n\t\t// font-weight: bold;\n\t\t// font-size: 3em;\n\t\t// text-align: center;\n\t}\n\t\n\tspan.MuiIconButton-label {\n    color: white;\n\t}\n`;\n\nexport const Wrapper = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\t> p {\n\t\tcolor: #fff;\n\t\tfont-size: 3rem;\n\t}\n\t.score {\n\t\tcolor: #fff;\n\t\tfont-size: 4rem;\n\t\tmargin: 10;\n\t}\n\th1 {\n\t\tfont-family: Fascinate Inline;\n\t\tbackground-image: linear-gradient(180deg, #fff, #fff);\n\t\tfont-weight: 400;\n\t\tbackground-size: 100%;\n\t\tbackground-clip: text;\n\t\t-webkit-background-clip: text;\n\t\t-webkit-text-fill-color: transparent;\n\t\t-moz-background-clip: text;\n\t\t-moz-text-fill-color: transparent;\n\t\tfilter: drop-shadow(2px 2px #fff);\n\t\tfont-size: 70px;\n\t\ttext-align: center;\n\t\tmargin: 20px;\n\t}\n\t.start,\n\t.next {\n\t\tcursor: pointer;\n\t\tbackground: linear-gradient(180deg, #ffffff, #ffcc91);\n\t\tborder: 2px solid #d38558;\n\t\tbox-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n\t\tborder-radius: 10px;\n\t\theight: 40px;\n\t\tmargin: 20px 0;\n\t\tpadding: 0 40px;\n\t}\n\t.start {\n\t\tmax-width: 200px;\n\t}\n`;\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n\tmax-width: 1100px;\n\tbackground: #fff;\n\tborder-radius: 10px;\n\tborder: 2px solid #000;\n\tpadding: 40px;\n\tbox-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n\ttext-align: center;\n\tp {\n\t\tfont-size: 1rem;\n\t}\n\t.question {\n\t\tcolor: #000;\n\t}\n`;\n\ntype ButtonWrapperProps = {\n\tcorrect: boolean;\n\tuserClicked: boolean;\n};\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n\ttransition: all 0.3s ease;\n\t:hover {\n\t\topacity: 0.8;\n\t}\n\tbutton {\n\t\tcursor: pointer;\n\t\tuser-select: none;\n\t\tfont-size: 2rem;\n\t\twidth: 100%;\n\t\theight: 80px;\n\t\tmargin: 10px 0;\n\t\tbackground: ${({ correct, userClicked }) =>\n\t\t\tcorrect ? \"#2a9d8f\" : !correct && userClicked ? \"#e63946\" : \"#48cae4\"};\n\t\tborder: 3px solid #ffffff;\n\t\tbox-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\n\t\tborder-radius: 10px;\n\t\tcolor: #fff;\n\t\ttext-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\n\t}\n`;\n","import React from \"react\";\n\nimport { AnswerObject } from \"../App\";\n\nimport { Wrapper, ButtonWrapper } from \"./QuestionCard.Styles\";\n\ntype Props = {\n\tquestion: string;\n\tanswers: string[];\n\tcallback: (e: any) => void;\n\tuserAnswer: AnswerObject | undefined;\n\tquestionNo: number;\n\ttotalQuestions: number;\n};\n\nconst QuestionCard: React.FC<Props> = ({\n\tquestion,\n\tanswers,\n\tcallback,\n\tuserAnswer,\n\tquestionNo,\n\ttotalQuestions\n}) => (\n\t<Wrapper>\n\t\t<p className=\"question\">\n\t\t\tQuestion: {questionNo}/{totalQuestions}\n\t\t</p>\n\t\t<p className=\"question\" dangerouslySetInnerHTML={{ __html: question }}></p>\n\t\t<div>\n\t\t\t{answers.map((answer) => (\n\t\t\t\t<ButtonWrapper\n\t\t\t\t\tkey={answer}\n\t\t\t\t\tcorrect={userAnswer?.correctAnswer === answer}\n\t\t\t\t\tuserClicked={userAnswer?.answer === answer}\n\t\t\t\t>\n\t\t\t\t\t<button\n\t\t\t\t\t\tdisabled={userAnswer ? true : false}\n\t\t\t\t\t\tvalue={answer}\n\t\t\t\t\t\tonClick={callback}\n\t\t\t\t\t>\n\t\t\t\t\t\t<span dangerouslySetInnerHTML={{ __html: answer }} />\n\t\t\t\t\t</button>\n\t\t\t\t</ButtonWrapper>\n\t\t\t))}\n\t\t</div>\n\t</Wrapper>\n);\n\nexport default QuestionCard;\n","import React, { useState } from \"react\";\nimport { fetchGameQuestions, Difficulty, QuestionState } from \"./API\";\nimport { GlobalStyle } from \"./App.Styles\";\nimport { Button } from \"@material-ui/core\";\nimport QuestionCard from \"./components/QuestionCard\";\nimport ArrowForwardIcon from \"@material-ui/icons/ArrowForward\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\n\nexport type AnswerObject = {\n\tquestion: string;\n\tanswer: string;\n\tcorrect: boolean;\n\tcorrectAnswer: string;\n};\n\nconst App: React.FC = () => {\n\tconst [loading, setLoading] = useState(false);\n\tconst [questions, setQuestions] = useState<QuestionState[]>([]);\n\tconst [number, setNumber] = useState(0);\n\tconst [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n\tconst [score, setScore] = useState(0);\n\tconst [gameOver, setGameOver] = useState(true);\n\tconst [totalQuestion, setTotalQuestion] = useState(5);\n\tconst [difficulty, setDifficulty] = useState(\"easy\");\n\n\tconst startTrivia = async () => {\n\t\tsetLoading(true);\n\t\tsetGameOver(false);\n\n\t\tconst newQuestions = await fetchGameQuestions(totalQuestion, difficulty);\n\n\t\tsetQuestions(newQuestions);\n\t\tsetScore(0);\n\t\tsetUserAnswers([]);\n\t\tsetNumber(0);\n\t\tsetLoading(false);\n\t};\n\n\tconst checkAnswer = (e: any) => {\n\t\tif (!gameOver) {\n\t\t\t// User's answer\n\t\t\tconst answer = e.currentTarget.value;\n\t\t\t// Check answer against correct answer\n\t\t\tconst correct = questions[number].correct_answer === answer;\n\t\t\t// Add score if answer is correct\n\t\t\tif (correct) setScore((prev) => prev + 1);\n\t\t\t// Save pm the answer in the array for user answers\n\t\t\tconst answerObject = {\n\t\t\t\tquestion: questions[number].question,\n\t\t\t\tanswer,\n\t\t\t\tcorrect,\n\t\t\t\tcorrectAnswer: questions[number].correct_answer\n\t\t\t};\n\t\t\tsetUserAnswers((prev) => [...prev, answerObject]);\n\t\t}\n\t};\n\n\tconst nextQuestion = () => {\n\t\t// Move on to the next question if not the last question\n\t\tconst nextQ = number + 1;\n\n\t\tif (nextQ === totalQuestion) {\n\t\t\tsetGameOver(true);\n\t\t} else {\n\t\t\tsetNumber(nextQ);\n\t\t}\n\t};\n\n\tconst handleChangeTotalNumberOfQuestion = (event: any) => {\n\t\tsetTotalQuestion(event.target.value);\n\t};\n\n\tconst handleChangeDifficulty = (event: any) => {\n\t\tsetDifficulty(event.target.value);\n\t};\n\tconst gameExit = (event: any) => {\n\t\tsetGameOver(true);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<GlobalStyle />\n\t\t\t<div className=\"App\">\n\t\t\t\t{gameOver ? <h1>Trivia Night Game!</h1> : null}\n\t\t\t\t<div className=\"flex-container\">\n\t\t\t\t\t<div className=\"flex-item\">\n\t\t\t\t\t\t{gameOver ? <p>Number of Questions:</p> : null}\n\t\t\t\t\t\t{gameOver ? (\n\t\t\t\t\t\t\t<FormControl component=\"fieldset\">\n\t\t\t\t\t\t\t\t<RadioGroup\n\t\t\t\t\t\t\t\t\tdefaultValue=\"5\"\n\t\t\t\t\t\t\t\t\tonChange={handleChangeTotalNumberOfQuestion}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<FormControlLabel value=\"5\" control={<Radio />} label=\"5\" />\n\t\t\t\t\t\t\t\t\t<FormControlLabel value=\"10\" control={<Radio />} label=\"10\" />\n\t\t\t\t\t\t\t\t\t<FormControlLabel value=\"20\" control={<Radio />} label=\"20\" />\n\t\t\t\t\t\t\t\t</RadioGroup>\n\t\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t\t) : null}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"flex-item\">\n\t\t\t\t\t\t{gameOver ? <p>Select Difficulty:</p> : null}\n\t\t\t\t\t\t{gameOver ? (\n\t\t\t\t\t\t\t<FormControl component=\"fieldset\">\n\t\t\t\t\t\t\t\t<RadioGroup\n\t\t\t\t\t\t\t\t\tdefaultValue=\"easy\"\n\t\t\t\t\t\t\t\t\tonChange={handleChangeDifficulty}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\t\t\t\t\tvalue=\"easy\"\n\t\t\t\t\t\t\t\t\t\tcontrol={<Radio />}\n\t\t\t\t\t\t\t\t\t\tlabel=\"easy\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\t\t\t\t\tvalue=\"medium\"\n\t\t\t\t\t\t\t\t\t\tcontrol={<Radio />}\n\t\t\t\t\t\t\t\t\t\tlabel=\"medium\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\t\t\t\t\tvalue=\"hard\"\n\t\t\t\t\t\t\t\t\t\tcontrol={<Radio />}\n\t\t\t\t\t\t\t\t\t\tlabel=\"hard\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</RadioGroup>\n\t\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t\t) : null}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t{gameOver ? (\n\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={startTrivia}>\n\t\t\t\t\t\tStart Here\n\t\t\t\t\t</Button>\n\t\t\t\t) : null}\n\t\t\t\t{!gameOver ? (\n\t\t\t\t\t<p className=\"score\">\n\t\t\t\t\t\tScore: {score} / {totalQuestion}{\" \"}\n\t\t\t\t\t</p>\n\t\t\t\t) : null}\n\t\t\t\t{loading ? <p>Loading Questions...</p> : null}\n\t\t\t\t{!loading && !gameOver && (\n\t\t\t\t\t<QuestionCard\n\t\t\t\t\t\tquestionNo={number + 1}\n\t\t\t\t\t\ttotalQuestions={totalQuestion}\n\t\t\t\t\t\tquestion={questions[number].question}\n\t\t\t\t\t\tanswers={questions[number].answers}\n\t\t\t\t\t\tuserAnswer={userAnswers ? userAnswers[number] : undefined}\n\t\t\t\t\t\tcallback={checkAnswer}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t<p></p>\n\t\t\t\t{!gameOver &&\n\t\t\t\t!loading &&\n\t\t\t\tuserAnswers.length === number + 1 &&\n\t\t\t\tnumber !== totalQuestion - 1 ? (\n\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={nextQuestion}>\n\t\t\t\t\t\tNext\n\t\t\t\t\t\t<ArrowForwardIcon />\n\t\t\t\t\t</Button>\n\t\t\t\t) : null}\n\t\t\t\t<p></p>\n\t\t\t\t{!loading && !gameOver && (\n\t\t\t\t\t<Button variant=\"contained\" onClick={gameExit}>\n\t\t\t\t\t\tStartover\n\t\t\t\t\t</Button>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n"],"sourceRoot":""}